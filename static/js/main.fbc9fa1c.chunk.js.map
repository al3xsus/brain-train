{"version":3,"sources":["components/Palette.ts","components/PaletteModal.tsx","components/MultiColoredWordsInfoModal.tsx","components/MultiColoredWords.tsx","assets/Brain.svg","components/Home.tsx","i18.ts","components/LanguageChangerDropdown.tsx","components/Error404.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Palette","PaletteModal","React","useState","open","setOpen","t","useTranslation","Modal","onClose","onOpen","trigger","Form","Button","primary","basic","color","size","fluid","Icon","name","Header","Content","scrolling","Description","Item","Group","divided","relaxed","map","entry","index","verticalAlign","style","height","width","backgroundColor","code","toUpperCase","Actions","onClick","MultiColoredWordsInfoModal","padding","fontSize","margin","COLUMN_SIZE","ROW_SIZE","MultiColoredWords","rowNum","setRowNum","colNum","setColNum","speed","setSpeed","tableData","setTableData","direction","setDirection","activeCell","setActiveCell","gameStatus","setGameStatus","underlineSVG","address","highlight","row","col","Math","floor","elem","document","getElementById","setAttribute","setTable","prepareData","useEffect","interval","setInterval","cleanUp","clearInterval","handleChange","event","data","value","changeDirection","word","i","k","random","length","push","Container","textAlign","Grid","celled","columns","doubling","stackable","Column","Table","Body","rowIndex","Row","cell","Cell","viewBox","fill","x","y","id","Field","Divider","Select","label","options","numb","text","onChange","compact","circular","icon","alignSelf","disabled","Checkbox","radio","checked","Home","Image","src","AppLogo","floated","as","resources","en","translation","ru","i18n","use","initReactI18next","init","lng","interpolation","escapeValue","LanguageChangerDropdown","Dropdown","key","flag","i18","changeLanguage","button","className","floating","labeled","language","Error404","withTranslation","basename","process","Segment","inverted","Menu","pointing","secondary","Link","to","exact","filter","position","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.fbc9fa1c.chunk.js","sourcesContent":["const Palette = [\n    {\n        'name': 'red',\n        'code': '#ff0000'\n    },\n    {\n        'name': 'yellow',\n        'code': '#FFFF00'\n    },\n    {\n        'name': 'green',\n        'code': '#00ff00'\n    },\n    {\n        'name': 'blue',\n        'code': '#0000FF'\n    },\n    {\n        'name': 'black',\n        'code': \"#000000\"\n    }\n]\n\nexport default Palette","import React from 'react'\nimport {Button, Form, Icon, Item, Modal} from 'semantic-ui-react'\nimport {useTranslation} from \"react-i18next\"\nimport Palette from \"./Palette\";\n\nconst PaletteModal = () => {\n    const [open, setOpen] = React.useState(false)\n    const {t} = useTranslation()\n\n    return (\n        <Modal\n            onClose={() => setOpen(false)}\n            onOpen={() => setOpen(true)}\n            open={open}\n            trigger={<Form.Button primary basic color={\"green\"} size={\"huge\"} fluid={true}>\n                <Icon name='paint brush' color={\"green\"}/>\n                {t(\"show-palette\")}\n            </Form.Button>}\n        >\n            <Modal.Header>{t(\"show-palette\")}</Modal.Header>\n            <Modal.Content scrolling={true}>\n                <Modal.Description>\n                    <Item.Group divided relaxed={true}>\n                        {Palette.map((entry, index) => {\n                            return <Item key={`Palette-${index}`}>\n                                <Item.Content verticalAlign='middle'>\n                                    <div style={{\n                                        height: \"3vh\",\n                                        width: \"3vw\",\n                                        backgroundColor: entry.code\n                                    }}/>\n                                </Item.Content>\n                                <Item.Content\n                                    verticalAlign='middle'>{t(`colors.${entry.name}`).toUpperCase()}</Item.Content>\n                            </Item>\n                        })}\n                    </Item.Group>\n                </Modal.Description>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button color='black' basic={true} onClick={() => setOpen(false)}>\n                    {t(\"got-it\")}\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    )\n}\n\nexport default PaletteModal","import React from 'react'\nimport {Button, Form, Icon, Modal} from 'semantic-ui-react'\nimport {useTranslation} from \"react-i18next\"\n\nconst MultiColoredWordsInfoModal = () => {\n    const [open, setOpen] = React.useState(false)\n    const {t} = useTranslation()\n\n    return (\n        <Modal\n            onClose={() => setOpen(false)}\n            onOpen={() => setOpen(true)}\n            open={open}\n            trigger={<Form.Button primary basic color={\"green\"} size={\"huge\"} fluid={true}>\n                <Icon name='info' color={\"blue\"}/>\n                {t(\"info\")}\n            </Form.Button>}\n        >\n            <Modal.Content scrolling={true}>\n                <Modal.Description>\n                    <p style={{padding: \"2vh 2vw 2vh 2vw\", fontSize: \"25px\", margin: 0}}>\n                        {t(\"m-c-w-text\")}\n                        <br/>\n                        <i>\n                            <b>{t(\"benefits\")}: </b>{t(\"m-c-w-list\")}\n                        </i>\n                    </p>\n                </Modal.Description>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button color='black' basic={true} onClick={() => setOpen(false)}>\n                    {t(\"got-it\")}\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    )\n}\n\nexport default MultiColoredWordsInfoModal","import React, {FormEvent, SyntheticEvent} from \"react\";\nimport {\n    ButtonProps,\n    Checkbox,\n    CheckboxProps,\n    Container,\n    Divider,\n    DropdownProps,\n    Form,\n    Grid,\n    Icon,\n    Table\n} from \"semantic-ui-react\";\nimport {useTranslation} from \"react-i18next\";\nimport Palette from \"./Palette\";\nimport PaletteModal from \"./PaletteModal\";\nimport MultiColoredWordsInfoModal from \"./MultiColoredWordsInfoModal\";\n\nconst COLUMN_SIZE = [3, 4, 5, 6, 7]\nconst ROW_SIZE = [3, 4, 5, 6, 7]\n\nconst MultiColoredWords = () => {\n    const {t} = useTranslation()\n    const [rowNum, setRowNum] = React.useState(4)\n    const [colNum, setColNum] = React.useState(4)\n    const [speed, setSpeed] = React.useState(0.5)\n    const [tableData, setTableData] = React.useState<any>(null)\n    const [direction, setDirection] = React.useState(\"start-to-end\")\n    const [activeCell, setActiveCell] = React.useState<null | number>(null)\n    const [gameStatus, setGameStatus] = React.useState(false)\n\n    const underlineSVG = (address: number, highlight: boolean) => {\n        let [row, col] = [0, 0]\n        if (address !== 0) {\n            row = Math.floor(address / colNum)\n            col = address - (row * colNum)\n        }\n        let elem: null | HTMLElement = document.getElementById(`text-${row}-${col}`)\n        if (elem) {\n            if (highlight) {\n                elem.setAttribute(\"style\", \"text-decoration: underline\")\n            } else {\n                elem.setAttribute(\"style\", \"\")\n            }\n        }\n    }\n\n    const changeGameStatus = () => {\n        if (gameStatus) {\n            setActiveCell(null)\n            if (activeCell !== null) {\n                underlineSVG(activeCell, false)\n            }\n        }\n        setGameStatus(!gameStatus)\n    }\n\n    const setTable = () => {\n        setTableData(prepareData())\n    }\n\n    React.useEffect(() => {\n        setTable()\n    }, [rowNum, colNum])\n\n    React.useEffect(() => {\n        let interval: (any) = null\n        if (gameStatus) {\n            if (activeCell === null) {\n                interval = setInterval(() => {\n                    if (direction === \"start-to-end\") {\n                        setActiveCell(0)\n                        underlineSVG(0, true)\n                    } else {\n                        setActiveCell((rowNum * colNum) - 1)\n                        underlineSVG((rowNum * colNum) - 1, true)\n                    }\n                }, speed * 1000)\n            } else {\n                const cleanUp = () => {\n                    setActiveCell(null)\n                    setGameStatus(false)\n                    underlineSVG(activeCell, false)\n                }\n                if (direction === \"start-to-end\") {\n                    if (activeCell < (rowNum * colNum) - 1) {\n                        interval = setInterval(() => {\n                            setActiveCell(activeCell + 1)\n                            underlineSVG(activeCell + 1, true)\n                            underlineSVG(activeCell, false)\n                        }, speed * 1000)\n                    } else {\n                        cleanUp()\n                    }\n                } else {\n                    if (activeCell >= 0) {\n                        interval = setInterval(() => {\n                            setActiveCell(activeCell - 1)\n                            underlineSVG(activeCell - 1, true)\n                            underlineSVG(activeCell, false)\n                        }, speed * 1000)\n                    } else {\n                        cleanUp()\n                    }\n                }\n            }\n        } else if (!gameStatus && activeCell !== null) {\n            clearInterval(interval);\n        }\n        return () => clearInterval(interval);\n    }, [gameStatus, activeCell]);\n\n    const handleChange = (event: SyntheticEvent<HTMLElement>, data: DropdownProps | ButtonProps) => {\n        switch (data.name) {\n            case 'rows-picker': {\n                setRowNum(data.value as number)\n                break\n            }\n            case 'column-picker': {\n                setColNum(data.value as number)\n                break\n            }\n            case 'add': {\n                setSpeed(speed + 0.5)\n                break\n            }\n            case 'minus': {\n                setSpeed(speed - 0.5)\n                break\n            }\n        }\n    }\n\n    const changeDirection = (event: FormEvent<HTMLInputElement>, data: CheckboxProps) => {\n        setDirection(data.value as string)\n    }\n\n    const prepareData = () => {\n        let data: [number, number][][] = []\n        let word = 0\n        let color = 0\n        for (let i = 0; i < rowNum; i++) {\n            let row: [number, number][] = []\n            for (let k = 0; k < colNum; k++) {\n                word = Math.floor(Math.random() * Palette.length)\n                color = Math.floor(Math.random() * Palette.length)\n                row.push([word, color])\n            }\n            data.push(row)\n        }\n        return data\n    }\n\n    const generateTable = () => {\n        if (tableData) {\n            return tableData.map((row: [number, number][], rowIndex: number) => <Table.Row key={`tr-key-${rowIndex}`}>\n                {row.map((cell: [number, number], index: number) => {\n                    return <Table.Cell key={`td-key-${rowIndex}-${index}`}>\n                        <svg viewBox=\"0 0 100 20\" style={{\n                            width: \"100%\",\n                            padding: \"1vh 1vw\",\n                            fill: Palette[cell[1]].code\n                        }}>\n                            <text\n                                x=\"0\"\n                                y=\"15\"\n                                id={`text-${rowIndex}-${index}`}\n                            >\n                                {t(`colors.${Palette[cell[0]].name}`).toUpperCase()}\n                            </text>\n                        </svg>\n                    </Table.Cell>\n                })}\n            </Table.Row>)\n        }\n        return null\n    }\n\n    return (\n        <Container style={{\n            width: \"90vw\"\n        }}>\n            <h2 style={{textAlign: \"center\"}}>{t(\"m-c-w\")}</h2>\n            <Grid celled={true} columns={2} doubling={true} stackable={true}>\n                <Grid.Column width={13}>\n                    <Table basic={\"very\"} size={\"large\"} celled={true}>\n                        <Table.Body>\n                            {generateTable()}\n                        </Table.Body>\n                    </Table>\n                </Grid.Column>\n                <Grid.Column width={3}>\n                    <Form size={\"huge\"}>\n                        <Form.Field>\n                            <MultiColoredWordsInfoModal/>\n                        </Form.Field>\n                        <Divider/>\n                        <Form.Field>\n                            {t(\"table-size\")}\n                        </Form.Field>\n                        <Form.Group>\n                            <Form.Select\n                                fluid\n                                name={'column-picker'}\n                                label={t(\"columns\")}\n                                options={\n                                    COLUMN_SIZE.map((numb) => {\n                                        return {\n                                            text: numb,\n                                            value: numb\n                                        }\n                                    })\n                                }\n                                value={colNum}\n                                onChange={handleChange}\n                            />\n                            <Form.Select\n                                fluid\n                                name={'rows-picker'}\n                                label={t(\"rows\")}\n                                options={\n                                    ROW_SIZE.map((numb) => {\n                                        return {\n                                            text: numb,\n                                            value: numb\n                                        }\n                                    })\n                                }\n                                value={rowNum}\n                                onChange={handleChange}\n                            />\n                        </Form.Group>\n                        <Form.Field>\n                            {t(\"speed\")}\n                        </Form.Field>\n                        <Form.Group>\n                            <Form.Button\n                                primary\n                                basic\n                                compact\n                                circular\n                                icon={'add'}\n                                name={'add'}\n                                onClick={handleChange}\n                            />\n                            <div style={{alignSelf: \"center\", textAlign: \"center\", width: \"5rem\"}}>\n                                {speed} s\n                            </div>\n                            <Form.Button\n                                primary\n                                basic\n                                compact\n                                circular\n                                icon={'minus'}\n                                name={'minus'}\n                                onClick={handleChange}\n                                disabled={speed === 0}\n                            />\n                        </Form.Group>\n                        <Form.Field>\n                            {t(\"direction\")}\n                        </Form.Field>\n                        <Form.Field>\n                            <Checkbox\n                                radio\n                                label={t(\"start-to-end\")}\n                                name='checkboxRadioGroup'\n                                value='start-to-end'\n                                checked={direction === \"start-to-end\"}\n                                onChange={changeDirection}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <Checkbox\n                                radio\n                                label={t(\"end-to-start\")}\n                                name='checkboxRadioGroup'\n                                value='end-to-start'\n                                onChange={changeDirection}\n                                checked={direction === \"end-to-start\"}\n                            />\n                        </Form.Field>\n                        <Divider/>\n                        <PaletteModal/>\n                        <Form.Button primary basic color={\"red\"} size={\"huge\"} fluid={true} onClick={changeGameStatus}>\n                            <Icon name={gameStatus ? \"square\" : \"play\"} color={\"red\"}/>\n                            {gameStatus ? t(\"stop\") : t(\"play\")}\n                        </Form.Button>\n                        <Form.Button primary basic color={\"blue\"} size={\"huge\"} fluid={true} onClick={setTable}>\n                            <Icon name='refresh' color={\"blue\"}/>\n                            {t(\"refresh\")}\n                        </Form.Button>\n                    </Form>\n                </Grid.Column>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default MultiColoredWords","export default __webpack_public_path__ + \"static/media/Brain.55b6c91f.svg\";","import React from 'react'\nimport {Container, Header, Image} from 'semantic-ui-react'\nimport AppLogo from \"../assets/Brain.svg\"\nimport {useTranslation} from \"react-i18next\";\n\nconst Home = () => {\n    const {t} = useTranslation()\n    return (<Container text>\n        <Image src={AppLogo} size='medium' floated={\"left\"}/>\n        <Header as='h2'>Brain Train</Header>\n        <p>\n            {t(\"main-text\")}\n        </p>\n    </Container>)\n}\n\nexport default Home","import i18n from \"i18next\";\nimport {initReactI18next} from \"react-i18next\";\n\nimport ru from \"./translations/ru.json\"\nimport en from \"./translations/en.json\"\n\nconst resources = {\n    en: {\n        translation: en\n    },\n    ru: {\n        translation: ru\n    }\n};\n\ni18n\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .init({\n        resources,\n        lng: \"ru\", // language to use, more information here: https://www.i18next.com/overview/configuration-options#languages-namespaces-resources\n        // you can use the i18n.changeLanguage function to change the language manually: https://www.i18next.com/overview/api#changelanguage\n        // if you're using a language detector, do not define the lng option\n\n        interpolation: {\n            escapeValue: false // react already safes from xss\n        }\n    });\n\nexport default i18n;","import i18 from \"../i18\";\nimport {Dropdown} from \"semantic-ui-react\";\nimport React from \"react\";\n\nconst LanguageChangerDropdown = () => {\n    return (\n        <Dropdown\n            options={\n                [\n                    {key: 'ru', value: 'ru', flag: 'ru', text: \"Русский\"},\n                    {key: 'en', value: 'en', flag: 'us', text: 'English'},\n                ]\n            }\n            onChange={(event, data) => {\n                i18.changeLanguage(data.value as string);\n            }}\n            button\n            className='icon'\n            floating\n            labeled\n            icon='world'\n            value={i18.language}\n        />\n    )\n}\n\nexport default LanguageChangerDropdown","import React from \"react\";\n\nexport default function Error404() {\n    return (\n        <div>\n            <h2>No such address :(</h2>\n        </div>\n    )\n}","import React, {Fragment} from 'react';\nimport './App.css';\nimport MultiColoredWords from \"./components/MultiColoredWords\";\nimport {Image, Menu, Segment} from 'semantic-ui-react'\nimport AppLogo from \"../src/assets/Brain.svg\"\nimport {useTranslation, withTranslation} from \"react-i18next\";\n\nimport {BrowserRouter as Router, NavLink as Link, Route, Switch} from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport LanguageChangerDropdown from \"./components/LanguageChangerDropdown\";\nimport Error404 from \"./components/Error404\";\n\nfunction App() {\n    const {t} = useTranslation()\n\n    return (\n        <Fragment>\n            <Router basename={process.env.PUBLIC_URL}>\n                <Segment inverted size='mini'>\n                    <Menu inverted pointing secondary size='tiny'>\n                        <Menu.Item\n                            as={Link}\n                            name='home'\n                            to={'/'}\n                            exact={true}\n                        >\n                            <Image src={AppLogo} size='mini' style={{filter: \"invert(1)\"}}/>\n                        </Menu.Item>\n                        <Menu.Item\n                            as={Link}\n                            name='multi-colored-words'\n                            to={'multi-colored-words'}\n                        >\n                            {t(\"m-c-w\")}\n                        </Menu.Item>\n                        <Menu.Item position={'right'}>\n                            <LanguageChangerDropdown/>\n                        </Menu.Item>\n                    </Menu>\n                </Segment>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home/>\n                    </Route>\n                    <Route path=\"/multi-colored-words\">\n                        <MultiColoredWords/>\n                    </Route>\n                    <Route>\n                        <Error404/>\n                    </Route>\n                </Switch>\n            </Router>\n        </Fragment>\n    );\n}\n\nexport default withTranslation()(App);\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\nimport './i18';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}