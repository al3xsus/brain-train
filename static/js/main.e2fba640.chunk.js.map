{"version":3,"sources":["components/palette.ts","components/PaletteModal.tsx","components/MultiColoredWords.tsx","assets/Brain.svg","i18.ts","components/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["palette","PaletteModal","React","useState","open","setOpen","t","useTranslation","Modal","onClose","onOpen","trigger","Form","Button","primary","basic","color","size","fluid","Icon","name","Header","Content","scrolling","Description","Item","Group","divided","relaxed","map","entry","index","verticalAlign","style","height","width","backgroundColor","Object","values","keys","toUpperCase","Actions","onClick","MultiColoredWords","rowNum","setRowNum","colNum","setColNum","speed","setSpeed","colourfulTable","setColourfulTable","direction","setDirection","playGame","a","stepRow","stepCol","elem","document","getElementById","timeout","col","row","step","Math","floor","setTable","generateTable","delay","Promise","res","setTimeout","useEffect","handleChange","event","data","value","changeDirection","rows","columns","word","i","k","random","length","push","rowIndex","cell","viewBox","padding","fill","x","y","id","Container","maxHeight","maxWidth","textAlign","fontSize","margin","List","bulleted","marginTop","Grid","celled","doubling","stackable","Column","Field","Select","label","options","numb","text","onChange","compact","circular","icon","alignSelf","disabled","Checkbox","radio","checked","Divider","resources","en","translation","ru","i18n","use","initReactI18next","init","lng","interpolation","escapeValue","Home","Image","src","AppLogo","floated","as","Error404","withTranslation","basename","process","Segment","inverted","Menu","pointing","secondary","Link","to","exact","filter","position","Dropdown","key","flag","i18","changeLanguage","button","className","floating","labeled","language","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.e2fba640.chunk.js","sourcesContent":["const palette = [\n    {\n        'red': '#ff0000'\n    },\n    {\n        'yellow': '#FFFF00'\n    },\n    {\n        'green': '#00ff00'\n    },\n    {\n        'blue': '#0000FF'\n    },\n    {\n        'gray': \"#808080\"\n    },\n    {\n        'black': \"#000000\"\n    },\n    {\n        \"purple\": \"#6a0dad\"\n    },\n    {\n        \"orange\": \"#ff8000\"\n    }\n]\n\nexport default palette","import React from 'react'\nimport {Button, Form, Icon, Item, Modal} from 'semantic-ui-react'\nimport {useTranslation} from \"react-i18next\"\nimport palette from \"./palette\";\n\nconst PaletteModal = () => {\n    const [open, setOpen] = React.useState(false)\n    const {t} = useTranslation()\n\n    return (\n        <Modal\n            onClose={() => setOpen(false)}\n            onOpen={() => setOpen(true)}\n            open={open}\n            trigger={<Form.Button primary basic color={\"green\"} size={\"huge\"} fluid={true}>\n                <Icon name='paint brush' color={\"green\"}/>\n                {t(\"show-palette\")}\n            </Form.Button>}\n        >\n            <Modal.Header>{t(\"show-palette\")}</Modal.Header>\n            <Modal.Content scrolling={true}>\n                <Modal.Description>\n                    <Item.Group divided relaxed={true}>\n                        {palette.map((entry, index) => {\n                            return <Item key={`palette-${index}`}>\n                                <Item.Content verticalAlign='middle'>\n                                    <div style={{\n                                        height: \"3vh\",\n                                        width: \"3vw\",\n                                        backgroundColor: Object.values(entry)[0]\n                                    }}/>\n                                </Item.Content>\n                                <Item.Content\n                                    verticalAlign='middle'>{t(`colors.${Object.keys(entry)[0]}`).toUpperCase()}</Item.Content>\n                            </Item>\n                        })}\n                    </Item.Group>\n                </Modal.Description>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button color='black' basic={true} onClick={() => setOpen(false)}>\n                    {t(\"got-it\")}\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    )\n}\n\nexport default PaletteModal","import React, {FormEvent, SyntheticEvent} from \"react\";\nimport './MultiColoredWords.css'\nimport {\n    ButtonProps,\n    Checkbox,\n    CheckboxProps,\n    Container,\n    Divider,\n    DropdownProps,\n    Form,\n    Grid,\n    Icon,\n    List\n} from \"semantic-ui-react\";\nimport {useTranslation} from \"react-i18next\";\nimport palette from \"./palette\";\nimport PaletteModal from \"./PaletteModal\";\n\nconst MultiColoredWords = () => {\n    const {t} = useTranslation()\n    const [rowNum, setRowNum] = React.useState(4)\n    const [colNum, setColNum] = React.useState(4)\n    const [speed, setSpeed] = React.useState(0.5)\n    const [colourfulTable, setColourfulTable] = React.useState<any>(null)\n    const [direction, setDirection] = React.useState(\"start-to-end\")\n\n    const playGame = async () => {\n        if (direction === \"start-to-end\") {\n            for (let stepRow = 0; stepRow < rowNum; stepRow++) {\n                for (let stepCol = 0; stepCol < colNum; stepCol++) {\n                    let elem: any = document.getElementById(`text-${stepRow}-${stepCol}`);\n                    elem.style = \"text-decoration: underline\"\n                    await timeout(speed * 1000)\n                    elem.style = \"\"\n                }\n            }\n        } else {\n            let col = 0\n            let row = 0\n            let elem: any = null\n            for (let step = (rowNum * colNum) - 1; step >= 0; step--) {\n                row = Math.floor(step / colNum)\n                col = step - (row * colNum)\n                elem = document.getElementById(`text-${row}-${col}`);\n                elem.style = \"text-decoration: underline\"\n                await timeout(speed * 1000)\n                elem.style = \"\"\n            }\n        }\n    }\n\n    const setTable = () => {\n        setColourfulTable(generateTable(rowNum, colNum))\n    }\n\n    const timeout = (delay: number) => {\n        return new Promise(res => setTimeout(res, delay));\n    }\n\n    React.useEffect(() => {\n        setTable()\n    }, [rowNum, colNum])\n\n    const handleChange = (event: SyntheticEvent<HTMLElement>, data: DropdownProps | ButtonProps) => {\n        switch (data.name) {\n            case 'rows-picker': {\n                setRowNum(data.value as number)\n                break\n            }\n            case 'column-picker': {\n                setColNum(data.value as number)\n                break\n            }\n            case 'add': {\n                setSpeed(speed + 0.5)\n                break\n            }\n            case 'minus': {\n                setSpeed(speed - 0.5)\n                break\n            }\n        }\n    }\n\n    const changeDirection = (event: FormEvent<HTMLInputElement>, data: CheckboxProps) => {\n        setDirection(data.value as string)\n    }\n\n    const generateTable = (rows: number, columns: number) => {\n        let data: any = []\n        let word = 0\n        let color = 0\n        for (let i = 0; i < rows; i++) {\n            let row: any = []\n            for (let k = 0; k < columns; k++) {\n                word = Math.floor(Math.random() * palette.length)\n                color = Math.floor(Math.random() * palette.length)\n                if (k > 0) {\n                    if (row[k - 1][1] === color) {\n                        if (color < palette.length - 1) {\n                            color += 1\n                        } else {\n                            color -= 1\n                        }\n                    }\n                    if (row[k - 1][0] === word) {\n                        if (word < palette.length - 1) {\n                            word += 1\n                        } else {\n                            word -= 1\n                        }\n                    }\n                }\n                row.push([word, color])\n            }\n            data.push(row)\n        }\n        return (\n            <table>\n                <tbody>\n                {\n                    data.map((row: any, rowIndex: number) => <tr key={`tr-key-${rowIndex}`}>\n                        {row.map((cell: any, index: number) => {\n                            return <td key={`td-key-${rowIndex}-${index}`}>{\n                                <svg viewBox=\"0 0 100 20\" style={{\n                                    width: \"100%\",\n                                    padding: \"1vh 1vw\",\n                                    fill: Object.values(palette[cell[1]])[0],\n                                }}>\n                                    <text\n                                        x=\"0\"\n                                        y=\"15\"\n                                        id={`text-${rowIndex}-${index}`}\n                                    >\n                                        {t(`colors.${Object.keys(palette[cell[0]])[0]}`).toUpperCase()}\n                                    </text>\n                                </svg>\n                            }</td>\n                        })}\n                    </tr>)\n                }\n                </tbody>\n            </table>\n        )\n    }\n\n    return (\n        <Container fluid={true} style={{maxHeight: \"100vh\", maxWidth: \"100vw\"}}>\n            <h2 style={{textAlign: \"center\"}}>{t(\"m-c-w\")}</h2>\n            <p style={{padding: \"2vh 2vw 2vh 2vw\", fontSize: \"25px\", margin: 0}}>\n                {t(\"m-c-w-text\")}\n            </p>\n            <List bulleted style={{padding: \"0 3vw 0 3vw\", marginTop: 0, fontSize: \"20px\"}}>\n                <List.Item><b>{t(\"benefits\")}: </b>{t(\"m-c-w-list\")}</List.Item>\n            </List>\n            <Grid celled={true} columns={2} doubling={true} stackable={true}>\n                <Grid.Column width={13}>\n                    {colourfulTable}\n                </Grid.Column>\n                <Grid.Column width={3}>\n                    <Form size={\"huge\"}>\n                        <Form.Field>\n                            {t(\"table-size\")}\n                        </Form.Field>\n                        <Form.Group>\n                            <Form.Select\n                                fluid\n                                name={'column-picker'}\n                                label={t(\"columns\")}\n                                options={\n                                    [3, 4, 5, 6, 7].map((numb) => {\n                                        return {\n                                            text: numb,\n                                            value: numb\n                                        }\n                                    })\n                                }\n                                value={colNum}\n                                onChange={handleChange}\n                            />\n                            <Form.Select\n                                fluid\n                                name={'rows-picker'}\n                                label={t(\"rows\")}\n                                options={\n                                    [3, 4, 5, 6, 7].map((numb) => {\n                                        return {\n                                            text: numb,\n                                            value: numb\n                                        }\n                                    })\n                                }\n                                value={rowNum}\n                                onChange={handleChange}\n                            />\n                        </Form.Group>\n                        <Form.Field>\n                            {t(\"speed\")}\n                        </Form.Field>\n                        <Form.Group>\n                            <Form.Button\n                                primary\n                                basic\n                                compact\n                                circular\n                                icon={'add'}\n                                name={'add'}\n                                onClick={handleChange}\n                            />\n                            <div style={{alignSelf: \"center\", textAlign: \"center\", width: \"5rem\"}}>\n                                {speed} s\n                            </div>\n                            <Form.Button\n                                primary\n                                basic\n                                compact\n                                circular\n                                icon={'minus'}\n                                name={'minus'}\n                                onClick={handleChange}\n                                disabled={speed === 0}\n                            />\n                        </Form.Group>\n                        <Form.Field>\n                            {t(\"direction\")}\n                        </Form.Field>\n                        <Form.Field>\n                            <Checkbox\n                                radio\n                                label={t(\"start-to-end\")}\n                                name='checkboxRadioGroup'\n                                value='start-to-end'\n                                checked={direction === \"start-to-end\"}\n                                onChange={changeDirection}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <Checkbox\n                                radio\n                                label={t(\"end-to-start\")}\n                                name='checkboxRadioGroup'\n                                value='end-to-start'\n                                onChange={changeDirection}\n                                checked={direction === \"end-to-start\"}\n                            />\n                        </Form.Field>\n                        <Divider/>\n                        <PaletteModal/>\n                        <Form.Button primary basic color={\"red\"} size={\"huge\"} fluid={true} onClick={playGame}>\n                            <Icon name='play' color={\"red\"}/>\n                            {t(\"play\")}\n                        </Form.Button>\n                        <Form.Button primary basic color={\"blue\"} size={\"huge\"} fluid={true} onClick={setTable}>\n                            <Icon name='refresh' color={\"blue\"}/>\n                            {t(\"refresh\")}\n                        </Form.Button>\n                    </Form>\n                </Grid.Column>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default MultiColoredWords","export default __webpack_public_path__ + \"static/media/Brain.55b6c91f.svg\";","import i18n from \"i18next\";\nimport {initReactI18next} from \"react-i18next\";\n\nimport ru from \"./translations/ru.json\"\nimport en from \"./translations/en.json\"\n\nconst resources = {\n    en: {\n        translation: en\n    },\n    ru: {\n        translation: ru\n    }\n};\n\ni18n\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .init({\n        resources,\n        lng: \"ru\", // language to use, more information here: https://www.i18next.com/overview/configuration-options#languages-namespaces-resources\n        // you can use the i18n.changeLanguage function to change the language manually: https://www.i18next.com/overview/api#changelanguage\n        // if you're using a language detector, do not define the lng option\n\n        interpolation: {\n            escapeValue: false // react already safes from xss\n        }\n    });\n\nexport default i18n;","import React from 'react'\nimport {Container, Header, Image} from 'semantic-ui-react'\nimport AppLogo from \"../assets/Brain.svg\"\nimport {useTranslation} from \"react-i18next\";\n\nconst Home = () => {\n    const {t} = useTranslation()\n    return (<Container text>\n        <Image src={AppLogo} size='medium' floated={\"left\"}/>\n        <Header as='h2'>Brain Train</Header>\n        <p>\n            {t(\"main-text\")}\n        </p>\n    </Container>)\n}\n\nexport default Home","import React, {Fragment} from 'react';\nimport './App.css';\nimport MultiColoredWords from \"./components/MultiColoredWords\";\nimport {Dropdown, Image, Menu, Segment} from 'semantic-ui-react'\nimport AppLogo from \"../src/assets/Brain.svg\"\nimport {useTranslation, withTranslation} from \"react-i18next\";\nimport i18 from './i18';\n\nimport {BrowserRouter as Router, NavLink as Link, Route, Switch} from \"react-router-dom\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n    const {t} = useTranslation()\n\n    return (\n        <Fragment>\n            <Router basename={process.env.PUBLIC_URL}>\n                <Segment inverted>\n                    <Menu inverted pointing secondary>\n                        <Menu.Item\n                            as={Link}\n                            name='home'\n                            to={'/'}\n                            exact={true}\n                        >\n                            <Image src={AppLogo} size='mini' style={{filter: \"invert(1)\"}}/>\n                        </Menu.Item>\n                        <Menu.Item\n                            as={Link}\n                            name='multi-colored-words'\n                            to={'multi-colored-words'}\n                        >\n                            {t(\"m-c-w\")}\n                        </Menu.Item>\n                        <Menu.Item position={'right'}>\n                            <Dropdown\n                                options={\n                                    [\n                                        {key: 'ru', value: 'ru', flag: 'ru', text: \"Русский\"},\n                                        {key: 'en', value: 'en', flag: 'us', text: 'English'},\n                                    ]\n                                }\n                                onChange={(event, data) => {\n                                    i18.changeLanguage(data.value as string);\n                                }}\n                                button\n                                className='icon'\n                                floating\n                                labeled\n                                icon='world'\n                                value={i18.language}\n                            />\n                        </Menu.Item>\n                    </Menu>\n                </Segment>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home/>\n                    </Route>\n                    <Route path=\"/multi-colored-words\">\n                        <MultiColoredWords/>\n                    </Route>\n                    <Route>\n                        <Error404/>\n                    </Route>\n                </Switch>\n            </Router>\n        </Fragment>\n    );\n}\n\nfunction Error404() {\n    return (\n        <div>\n            <h2>No such address :(</h2>\n        </div>\n    )\n}\n\nexport default withTranslation()(App);\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\nimport './i18';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}